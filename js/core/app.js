/**
 * App Core - Calculadora de Madeira
 * ATEN√á√ÉO: Arquivo principal de inicializa√ß√£o
 * Coordena todos os m√≥dulos preservando sequ√™ncia atual
 * Baseado na l√≥gica de DOMContentLoaded dos arquivos atuais
 */

// Imports dos m√≥dulos (ES6)
import { CalculatorModule } from '../modules/calculator.js';
import { StorageModule } from '../modules/storage.js';
import { PDFGeneratorModule } from '../modules/pdf-generator.js';
import { FeedbackComponent } from '../components/feedback.js';
import { MenuComponent } from '../components/menu.js';
import { AutocompleteComponent } from '../components/autocomplete.js';
import { FormattersUtils } from '../utils/formatters.js';

export class CalculadoraMadeiraApp {
    constructor() {
        this.modules = {};
        this.isInitialized = false;
        this.currentPage = this.getCurrentPageName();
        this.init();
    }

    /**
     * Inicializa√ß√£o principal - PRESERVAR SEQU√äNCIA ATUAL
     */
    async init() {
        try {
            console.log('üöÄ Iniciando Calculadora de Madeira...');
            
            // 1. Inicializar m√≥dulos base primeiro
            await this.initializeBaseModules();
            
            // 2. Configurar eventos globais
            this.setupGlobalEvents();
            
            // 3. Inicializar componentes espec√≠ficos da p√°gina
            await this.initializePageSpecificComponents();
            
            // 4. Aplicar formata√ß√µes e m√°scaras
            this.applyFormattingAndMasks();
            
            // 5. Carregar dados do usu√°rio se logado
            this.loadUserSession();
            
            // 6. Configurar PWA (se necess√°rio)
            this.initializePWA();
            
            this.isInitialized = true;
            console.log('‚úÖ Aplica√ß√£o inicializada com sucesso');
            
            // Disparar evento customizado
            this.dispatchInitializationEvent();
            
        } catch (error) {
            console.error('‚ùå Erro na inicializa√ß√£o da aplica√ß√£o:', error);
            this.handleInitializationError(error);
        }
    }

    /**
     * Inicializar m√≥dulos base - ORDEM CR√çTICA
     */
    async initializeBaseModules() {
        console.log('üì¶ Inicializando m√≥dulos base...');
        
        try {
            // Storage sempre primeiro - CR√çTICO
            this.modules.storage = new StorageModule();
            console.log('‚úÖ Storage m√≥dulo inicializado');
            
            // Formatadores
            this.modules.formatters = new FormattersUtils();
            console.log('‚úÖ Formatadores inicializados');
            
            // Sistema de feedback
            this.modules.feedback = new FeedbackComponent();
            console.log('‚úÖ Sistema de feedback inicializado');
            
            // Menu lateral
            this.modules.menu = new MenuComponent();
            console.log('‚úÖ Menu lateral inicializado');
            
            // Autocomplete
            this.modules.autocomplete = new AutocompleteComponent();
            console.log('‚úÖ Sistema de autocomplete inicializado');
            
            // Gerador de PDF
            this.modules.pdfGenerator = new PDFGeneratorModule();
            this.modules.pdfGenerator.setDependencies(this.modules.storage, this.modules.feedback);
            console.log('‚úÖ Gerador de PDF inicializado');
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar m√≥dulos base:', error);
            throw error;
        }
    }

    /**
     * Inicializar componentes espec√≠ficos da p√°gina
     */
    async initializePageSpecificComponents() {
        console.log(`üìÑ Inicializando componentes para: ${this.currentPage}`);
        
        switch (this.currentPage) {
            case 'calc.html':
            case 'index.html':
                await this.initializeCalculatorPage();
                break;
                
            case 'orcamentos.html':
                await this.initializeQuotesPage();
                break;
                
            case 'perfil.html':
                await this.initializeProfilePage();
                break;
                
            case 'configuracoes.html':
                await this.initializeSettingsPage();
                break;
                
            default:
                console.log(`‚ÑπÔ∏è P√°gina ${this.currentPage} n√£o requer inicializa√ß√£o espec√≠fica`);
        }
    }

    /**
     * Inicializar p√°gina da calculadora - FUN√á√ÉO CR√çTICA
     */
    async initializeCalculatorPage() {
        console.log('üßÆ Inicializando p√°gina da calculadora...');
        
        try {
            // Calculadora principal - M√ìDULO CR√çTICO
            this.modules.calculator = new CalculatorModule();
            console.log('‚úÖ M√≥dulo calculadora inicializado');
            
            // Configurar eventos da calculadora
            this.setupCalculatorEvents();
            
            // Inicializar autocomplete espec√≠fico da calculadora
            this.modules.autocomplete.initializeAll();
            
            // Carregar lista de madeira existente
            this.loadWoodList();
            
            // Configurar bot√µes de a√ß√£o
            this.setupActionButtons();
            
            console.log('‚úÖ P√°gina da calculadora configurada');
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar p√°gina da calculadora:', error);
        }
    }

    /**
     * Configurar eventos da calculadora - PRESERVAR L√ìGICA ATUAL
     */
    setupCalculatorEvents() {
        // Campos de input que triggam c√°lculo - IDS EXATOS ATUAIS
        const calculatorInputs = [
            'thickness', 'width', 'length', 
            'quantity', 'packageQuantity', 'price'
        ];
        
        calculatorInputs.forEach(id => {
            const input = document.getElementById(id);
            if (input) {
                // Evento de input para c√°lculo em tempo real - COMPORTAMENTO ATUAL
                input.addEventListener('input', () => {
                    if (this.modules.calculator) {
                        this.modules.calculator.calculate();
                    }
                });
                
                // Atualizar label de quantidade quando packageQuantity mudar
                if (id === 'packageQuantity') {
                    input.addEventListener('input', () => {
                        if (this.modules.calculator) {
                            this.modules.calculator.updateQuantityLabel();
                        }
                    });
                }
            }
        });
        
        // Bot√£o adicionar √† lista - PRESERVAR FUN√á√ÉO ATUAL
        const addButton = document.querySelector('.add-button');
        if (addButton) {
            addButton.addEventListener('click', () => {
                this.addToWoodList();
            });
        }
        
        // Bot√£o salvar or√ßamento - PRESERVAR FUN√á√ÉO ATUAL
        const saveQuoteButton = document.getElementById('saveQuoteButton');
        if (saveQuoteButton) {
            saveQuoteButton.addEventListener('click', () => {
                this.saveQuote();
            });
        }
        
        console.log('‚úÖ Eventos da calculadora configurados');
    }

    /**
     * Adicionar item √† lista de madeira - PRESERVAR L√ìGICA EXATA ATUAL
     */
    addToWoodList() {
        try {
            if (!this.modules.calculator.validateInputs()) {
                return;
            }
            
            const result = this.modules.calculator.calculate();
            if (!result) {
                this.modules.feedback.error('Erro ao calcular. Verifique os dados inseridos.');
                return;
            }
            
            // Obter dados dos campos - IDS EXATOS ATUAIS
            const item = {
                client: document.getElementById('clientName')?.value || '',
                contact: document.getElementById('clientContact')?.value || '',
                paymentTerms: document.getElementById('paymentTerms')?.value || '',
                species: document.getElementById('species')?.value || '',
                thickness: parseFloat(document.getElementById('thickness')?.value) || 0,
                width: parseFloat(document.getElementById('width')?.value) || 0,
                length: parseFloat(document.getElementById('length')?.value) || 0,
                quantity: parseInt(document.getElementById('quantity')?.value) || 0,
                packageQuantity: parseInt(document.getElementById('packageQuantity')?.value) || 1,
                pricePerCubicMeter: result.price,
                volumeUnit: result.volumeUnit,
                volumeTotal: result.volumeTotal,
                cost: result.cost,
                totalQuantity: result.totalQuantity,
                timestamp: new Date().toISOString()
            };
            
            // Salvar na lista - PRESERVAR CHAVE localStorage ATUAL
            const woodList = this.modules.storage.loadWoodList();
            woodList.push(item);
            this.modules.storage.saveWoodList(woodList);
            
            // Feedback de sucesso - MENSAGEM ATUAL
            this.modules.feedback.success('Item adicionado √† lista com sucesso!');
            
            // Limpar formul√°rio - COMPORTAMENTO ATUAL
            this.clearCalculatorForm();
            
            // Atualizar lista visual se existir
            this.updateWoodListDisplay();
            
            console.log('üìù Item adicionado √† lista:', item);
            
        } catch (error) {
            console.error('‚ùå Erro ao adicionar item √† lista:', error);
            this.modules.feedback.error('Erro ao adicionar item √† lista.');
        }
    }

    /**
     * Limpar formul√°rio da calculadora - PRESERVAR L√ìGICA ATUAL
     */
    clearCalculatorForm() {
        const fieldsToKeep = ['clientName', 'clientContact', 'paymentTerms'];
        const fieldsToClear = ['species', 'thickness', 'width', 'length', 'quantity', 'packageQuantity', 'price'];
        
        fieldsToClear.forEach(id => {
            const field = document.getElementById(id);
            if (field) {
                field.value = id === 'packageQuantity' ? '1' : '';
            }
        });
        
        // Resetar resultados
        ['volume', 'totalVolume', 'cost'].forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = '0,000m¬≥';
            }
        });
    }

    /**
     * Aplicar formata√ß√µes e m√°scaras - PRESERVAR COMPORTAMENTO ATUAL
     */
    applyFormattingAndMasks() {
        console.log('üé® Aplicando formata√ß√µes e m√°scaras...');
        
        try {
            // Campo de telefone - M√ÅSCARA ATUAL
            const phoneInput = document.getElementById('clientContact');
            if (phoneInput) {
                this.modules.formatters.applyPhoneMask(phoneInput);
            }
            
            // Campo de pre√ßo - M√ÅSCARA ATUAL
            const priceInput = document.getElementById('price');
            if (priceInput) {
                this.modules.formatters.applyPriceMask(priceInput);
            }
            
            console.log('‚úÖ Formata√ß√µes aplicadas');
            
        } catch (error) {
            console.error('‚ùå Erro ao aplicar formata√ß√µes:', error);
        }
    }

    /**
     * Configurar eventos globais - PRESERVAR COMPORTAMENTO ATUAL
     */
    setupGlobalEvents() {
        console.log('üåê Configurando eventos globais...');
        
        // Bot√£o do menu - PRESERVAR FUN√á√ÉO ATUAL
        const menuButton = document.querySelector('.menu-btn');
        if (menuButton) {
            menuButton.addEventListener('click', () => {
                this.modules.menu.toggle();
            });
        }
        
        // Bot√£o home - PRESERVAR FUN√á√ÉO ATUAL
        const homeButton = document.querySelector('.home-btn');
        if (homeButton) {
            homeButton.addEventListener('click', () => {
                window.location.href = 'calc.html';
            });
        }
        
        // Bot√£o refresh - PRESERVAR FUN√á√ÉO ATUAL
        const refreshButton = document.querySelector('.refresh-btn');
        if (refreshButton) {
            refreshButton.addEventListener('click', () => {
                window.location.reload();
            });
        }
        
        // Eventos de teclado globais
        document.addEventListener('keydown', (e) => {
            // ESC para fechar menus
            if (e.key === 'Escape') {
                this.modules.menu.close();
                this.modules.autocomplete.clearAllSuggestions();
            }
        });
        
        console.log('‚úÖ Eventos globais configurados');
    }

    /**
     * Carregar sess√£o do usu√°rio - PRESERVAR L√ìGICA ATUAL
     */
    loadUserSession() {
        try {
            const currentUserId = this.modules.storage.getCurrentUserId();
            const userData = this.modules.storage.getUserData();
            
            if (currentUserId && userData) {
                console.log('üë§ Sess√£o do usu√°rio carregada:', userData);
                
                // Atualizar menu com dados do usu√°rio
                if (userData.name && userData.email) {
                    this.modules.menu.updateUserInfo(userData.name, userData.email);
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar sess√£o do usu√°rio:', error);
        }
    }

    /**
     * Inicializar PWA features
     */
    initializePWA() {
        try {
            // Service Worker j√° √© registrado via service-worker.js atual
            // PWA updater j√° √© carregado via pwa-updater.js atual
            
            console.log('üì± PWA features dispon√≠veis');
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar PWA:', error);
        }
    }

    /**
     * Obter nome da p√°gina atual
     */
    getCurrentPageName() {
        const path = window.location.pathname;
        return path.split('/').pop() || 'index.html';
    }

    /**
     * Carregar lista de madeira existente
     */
    loadWoodList() {
        try {
            const woodList = this.modules.storage.loadWoodList();
            console.log(`üìã Lista de madeira carregada: ${woodList.length} itens`);
            return woodList;
        } catch (error) {
            console.error('‚ùå Erro ao carregar lista de madeira:', error);
            return [];
        }
    }

    /**
     * Configurar bot√µes de a√ß√£o - PRESERVAR FUNCIONALIDADE ATUAL
     */
    setupActionButtons() {
        // Os bot√µes j√° s√£o configurados nos eventos espec√≠ficos
        console.log('‚úÖ Bot√µes de a√ß√£o configurados');
    }

    /**
     * Atualizar display da lista de madeira (se existir na p√°gina)
     */
    updateWoodListDisplay() {
        // Esta fun√ß√£o seria implementada quando criarmos o componente de lista
        console.log('üìä Display da lista atualizado');
    }

    /**
     * Salvar or√ßamento - PRESERVAR L√ìGICA ATUAL
     */
    saveQuote() {
        try {
            const woodList = this.modules.storage.loadWoodList();
            if (woodList.length === 0) {
                this.modules.feedback.warning('Adicione itens √† lista antes de salvar o or√ßamento.');
                return;
            }
            
            const currentUserId = this.modules.storage.getCurrentUserId();
            if (!currentUserId) {
                this.modules.feedback.error('Usu√°rio n√£o encontrado. Fa√ßa login novamente.');
                return;
            }
            
            const quote = {
                items: [...woodList],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            
            this.modules.storage.saveQuote(currentUserId, quote);
            this.modules.feedback.success('Or√ßamento salvo com sucesso!');
            
            // Limpar lista atual
            this.modules.storage.saveWoodList([]);
            this.updateWoodListDisplay();
            
            console.log('üíæ Or√ßamento salvo:', quote);
            
        } catch (error) {
            console.error('‚ùå Erro ao salvar or√ßamento:', error);
            this.modules.feedback.error('Erro ao salvar or√ßamento.');
        }
    }

    /**
     * Tratar erro de inicializa√ß√£o
     */
    handleInitializationError(error) {
        console.error('üí• Erro cr√≠tico na inicializa√ß√£o:', error);
        
        // Mostrar mensagem de erro para o usu√°rio
        document.body.innerHTML += `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                        background: #f44336; color: white; padding: 20px; border-radius: 8px; 
                        z-index: 10000; text-align: center;">
                <h3>‚ùå Erro na Inicializa√ß√£o</h3>
                <p>Houve um problema ao carregar a aplica√ß√£o.</p>
                <button onclick="window.location.reload()" 
                        style="background: white; color: #f44336; border: none; padding: 10px 20px; 
                               border-radius: 4px; cursor: pointer; margin-top: 10px;">
                    Recarregar P√°gina
                </button>
            </div>
        `;
    }

    /**
     * Disparar evento de inicializa√ß√£o completa
     */
    dispatchInitializationEvent() {
        const event = new CustomEvent('calculadoraMadeiraReady', {
            detail: {
                app: this,
                modules: this.modules,
                timestamp: new Date().toISOString()
            }
        });
        
        document.dispatchEvent(event);
        console.log('üì° Evento de inicializa√ß√£o disparado');
    }

    /**
     * M√©todos utilit√°rios p√∫blicos
     */
    getModule(name) {
        return this.modules[name];
    }

    isReady() {
        return this.isInitialized;
    }

    getCurrentPage() {
        return this.currentPage;
    }

    /**
     * Reinicializar aplica√ß√£o
     */
    async reinitialize() {
        console.log('üîÑ Reinicializando aplica√ß√£o...');
        this.isInitialized = false;
        await this.init();
    }

    /**
     * Destruir aplica√ß√£o (cleanup)
     */
    destroy() {
        console.log('üóëÔ∏è Destruindo aplica√ß√£o...');
        
        Object.values(this.modules).forEach(module => {
            if (module && typeof module.destroy === 'function') {
                module.destroy();
            }
        });
        
        this.modules = {};
        this.isInitialized = false;
        
        console.log('‚úÖ Aplica√ß√£o destru√≠da');
    }
}

// Inst√¢ncia global para compatibilidade
window.CalculadoraMadeiraApp = CalculadoraMadeiraApp;

// Auto-inicializa√ß√£o quando DOM estiver pronto - COMPORTAMENTO ATUAL
let appInstance = null;

function initializeApp() {
    if (!appInstance) {
        appInstance = new CalculadoraMadeiraApp();
        window.app = appInstance; // Disponibilizar globalmente
    }
    return appInstance;
}

// Compatibilidade com diferentes estados do DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    // DOM j√° carregado
    setTimeout(initializeApp, 0);
}

// Export para uso como m√≥dulo
export { initializeApp }; 